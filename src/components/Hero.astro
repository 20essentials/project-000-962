---
import { baseUrl } from '@/utils/functions';
import MenuTooltip from '@/components/MenuTooltip.astro';
import ModalPreview from '@/components/ModalPreview.astro';
const editorsNames = ['html', 'css', 'javascript', 'preview'];
---

<script>
  import { encode, decode } from 'js-base64';
  import { $, closeOrOpenModal, addHandlersKeyDowns } from '@/utils/functions';
  import Dracula from 'monaco-themes/themes/Dracula.json';
  import * as Monaco from 'monaco-editor';
  import HtmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';
  import CssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';
  import JsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';
  import { debounce, updateUrlQueries } from '@/utils/functions';
  import { useEmmet } from '@/utils/emmet';
  import {
    INITIAL_CSS,
    INITIAL_HTML,
    INITIAL_JS,
    COMMON_OPTIONS_EDITOR,
    htmlScaffold
  } from '@/utils/consts';
  import JSZip from 'jszip';

  window.MonacoEnvironment = {
    getWorker(_, label) {
      if (label === 'html') return new HtmlWorker();
      if (label === 'javascript') return new JsWorker();
      if (label === 'css') return new CssWorker();
      return new JsWorker(); 
    }
  };

  Monaco.editor.defineTheme(
    'Dracula',
    Dracula as Monaco.editor.IStandaloneThemeData
  );

  const $containerHTML = $('.editor-html') as HTMLElement;
  const $containerCSS = $('.editor-css') as HTMLElement;
  const $containerJS = $('.editor-javascript') as HTMLElement;
  const $iframe = $('.editor-preview') as HTMLIFrameElement;

  const currentUrl = new URL(window.location.href);
  const [htmlCodificado, cssCodificado, jsCodificado] = [
    'HTML',
    'CSS',
    'JavaScript'
  ].map(lang => currentUrl.searchParams.get(lang));

  let htmlValue = htmlCodificado ? decode(htmlCodificado) : '';
  let cssValue = cssCodificado ? decode(cssCodificado) : '';
  let jsValue = jsCodificado ? decode(jsCodificado) : `import CanvasConfetti from 'https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.3/+esm';

  CanvasConfetti();`;

  // let htmlValue = INITIAL_HTML;
  // let cssValue = INITIAL_CSS;
  // let jsValue = INITIAL_JS;

  interface LanguageConfig {
    container: HTMLElement;
    value: string;
  }

  const allLanguages: [string, LanguageConfig][] = [
    ['html', { container: $containerHTML, value: htmlValue }],
    ['css', { container: $containerCSS, value: cssValue }],
    ['javascript', { container: $containerJS, value: jsValue }]
  ];

  const editors = allLanguages.map(([languageName, language]) => {
    const editor = Monaco.editor.create(language.container, {
      value: language.value,
      language: languageName,
      ...COMMON_OPTIONS_EDITOR,
      theme: 'Dracula'
    });

    editor.onDidChangeModelContent(debounce(updateIframe, 200));

    return editor;
  });

  const [htmlEditor, cssEditor, javascriptEditor] = editors;
  useEmmet(Monaco, htmlEditor);

    function getValuesFromEditors() {
    const htmlValue = htmlEditor.getValue().trim().replaceAll(/\n+/g, '\n');
    const cssValue = cssEditor.getValue().trim().replaceAll(/\n+/g, '\n');
    const jsValue = javascriptEditor.getValue().trim().replaceAll(/\n+/g, '\n');
    return { htmlValue, cssValue, jsValue };
  }

  function updateIframe() {
    const { htmlValue, cssValue, jsValue } = getValuesFromEditors();
    updateUrlQueries({ htmlValue, cssValue, jsValue });

    $iframe.setAttribute(
      'srcDoc',
      `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Preview</title>
        <style>
          *,
          *::after,
          *::before {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }

          body {
            background-color: #fff;
          }

          ${cssValue}</style>
      </head>
      <body>
        ${htmlValue}<script type="module">${jsValue}<\/script>
      </body>
      </html>
    `
    );
  }

  document.addEventListener('DOMContentLoaded', () => {
    updateIframe();
  });

  document.addEventListener('click', e => {
    const target = e.target as HTMLElement;
    if (target.matches('.thePreviewLogo')) {
      closeOrOpenModal();
      return;
    }

      if (
      target.matches('.cb-download-file') ||
      target.matches('.cb-download-file *')
    ) {
      const { htmlValue, cssValue, jsValue } = getValuesFromEditors();
      const zip = new JSZip();
      zip.file('index.html', htmlScaffold(htmlValue));
      zip.file('styles.css', cssValue);
      zip.file('script.js', jsValue);

      zip.generateAsync({ type: 'blob' }).then(blob => {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'code-of-the-project.zip';
        a.click();
        URL.revokeObjectURL(url);
      });
      return;
    }
  });

  addHandlersKeyDowns();
</script>

<section class='main-section'>
  {
    editorsNames.map(language => {
      const isPreview = language === 'preview';
      const TagElement = isPreview ? 'iframe' : 'article';
      const srcImage = baseUrl(`/assets/${language}.svg`);
      const classNameLogo = `am-logo ${isPreview ? 'thePreviewLogo' : ''}`;
      return (
        <aside class='container-one-editor'>
          <TagElement class={`editor editor-${language}`} />
          <img class={classNameLogo} src={srcImage} alt={`Image ${language}`} />
        </aside>
      );
    })
  }

  <ModalPreview />
  <MenuTooltip />
</section>

<style>
  .main-section {
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);

    @media (width <= 1111px) {
      display: flex;
      flex-direction: column;
      height: 400vh;
      scroll-snap-type: y mandatory;
      padding-right: 1vmax;

      .container-one-editor {
        height: 100dvh;
        scroll-snap-align: center;
      }
    }

    .container-one-editor {
      position: relative;
      user-select: none;

      .editor {
        width: 100%;
        height: 100%;
        resize: none;
        border: 0.1vmax solid #fff2;
        font-size: 1.2vmax;
        padding: 1vmax;
        display: flex;
        position: absolute;
        outline: none;
        background-color: #000;
        overflow: hidden;

        .monaco-editor {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        &.editor-preview {
          background-color: #000;
        }
      }

      &:hover {
        .am-logo {
          &.thePreviewLogo {
            opacity: 1;
            background-color: #fff1;
          }
        }
      }

      .am-logo {
        position: absolute;
        width: 3vmax;
        height: 3vmax;
        right: 2.5vmax;
        bottom: 2vmax;
        z-index: 100;
        pointer-events: none;

        @media (width <= 1111px) {
          right: 3.5vmax;
          bottom: 3vmax;
        }

        &.thePreviewLogo {
          opacity: 0;
          pointer-events: auto;
          transition: opacity 0.3s ease-in-out;

          @media (width <= 1111px) {
            opacity: 1;
            background-color: #fff1;
          }
        }
      }
    }
  }
</style>
